/* The BNF for this parser was derived from: http://savage.net.au/SQL/sql-92.bnf (SQL-92) 
* https://javacc.java.net/doc/docindex.html
*/
options{
STATIC = false;
}
/* *** Specification of the parser class *** */
PARSER_BEGIN(TableQueryParser)
package org.sagebionetworks.table.query;
import java.io.StringReader;
import org.sagebionetworks.repo.model.table.query.*;

public class TableQueryParser {

	private TableQueryModel model;

	public TableQueryModel getModel() {
		return model;
	}
	/**
	 * Parse the passed query string into a TableQueryModel
	 * 
	 * @param query
	 * @return
	 * @throws ParseException
	 */
	public static TableQueryModel parserQuery(String query)
			throws ParseException {
		TableQueryParser parser = new TableQueryParser(new StringReader(query));
		parser.Start();
		return parser.getModel();
	}
}

PARSER_END(TableQueryParser)

/* Skip whitespace */
SKIP : /* WHITE SPACE */
{ 
        " " | "\t" | "\r" | "\f"
        | "\n" 
        | < NONPRINTABLE: (["\u0000"-"\u0020", "\u0080"-"\u00ff"])+ >
}


/** TOKENS **/

/* Reserved words */
TOKEN [IGNORE_CASE]: {
  < all: "ALL">
| < as: "AS">
| < avg: "AVG">
| < date: "DATE" >
| < count: "COUNT">
| < current_date: "CURRENT_DATE">
| < current_time: "CURRENT_TIME">
| < distinct: "DISTINCT"> 
| < from: "FROM">
| < interval: "INTERVAL">
| < max: "MAX" >
| < min: "MIN" >
| < select: "SELECT" >
| < sum: "SUM" >
| < syn: "SYN" >
| < time: "TIME" >
| < timestamp: "TIMESTAMP">
}
/* Symbols and punctuation */
TOKEN:{
  < asterisk: "*">
| < comma: ",">
| < double_quote: "\"" >
| < escaped_double_quote: "\"\"">
| < left_paren: "(">
| < minus_sign: "-">
| < period: "." >
| < plus_sign: "+">
| < quote: "'" >
| < escaped_quote: "''" >
| < right_paren: ")">
| < solidus: "/">
| <underscore: "_">
}

TOKEN: { 
  < digit: ["0"-"9"]>
| < letter: ["a"-"z","A"-"Z"]>
| < alph_numeric: ["a"-"z","A"-"Z","0"-"9","_"]>
}

TOKEN: { 
  < non_quote: ~["'"]>
| < nondoublequote_character: ~["\""] >
 }
void regularIdentifier():
{}
{
	identifierBody()
}
void identifierBody():
{}
{	
	
	identifierStart() ( <alph_numeric> )* 
}
void identifierStart():
{}
{
	<letter>
}
/** Literal Numbers, Strings, Dates and Times */
void literal():
{}
{
	signedNumericLiteral() | generalLiteral()
}
void signedNumericLiteral():
{}
{
	[ sign() ] unsignedNumericLiteral()
}
void generalLiteral():
{}
{
	characterStringLiteral()
}
void unsignedNumericLiteral():
{}
{	
	LOOKAHEAD(2)
	exactNumericLiteral()
	| approximateNumericLiteral()
}
void exactNumericLiteral():
{}
{
	unsignedInteger() [ <period> [ unsignedInteger() ] ]
	| <period> unsignedInteger()
}
void unsignedInteger():
{}
{
	(<digit>)+
}
void approximateNumericLiteral():
{}
{
	mantissa() ("e"|"E") exponent()
}
void mantissa():
{}
{
	exactNumericLiteral()
}
void exponent():
{}
{
	signedInteger()
}
void signedInteger():
{}
{
	[ sign() ] unsignedInteger()
}
void sign():
{}
{
	<plus_sign> | <minus_sign>
}
void characterRepresentation():
{}
{
	<non_quote> | quoteSymbol()
}

void quoteSymbol():
{}
{
	<escaped_quote>
}
void characterStringLiteral():
{}
{
	LOOKAHEAD(3)
	<quote><quote>
	
	| <quote> (characterRepresentation())* <quote>
}

void Start():
{ model = new TableQueryModel(); }
{
	querySpecification()
}
void valueExpression():
{}
{	
	LOOKAHEAD(2)
	numericValueExpression()
	| stringValueExpression()
}
void numericValueExpression():
{}
{
	term()
}
void term():
{}
{
	factor()
}
void factor():
{}
{
	[sign()] numericPrimary()
}
void numericPrimary():
{}
{
	valueExpressionPrimary()
}
void valueExpressionPrimary():
{}
{
	LOOKAHEAD(3)
	unsignedValueSpecification()
	| columnReference()
	| setFunctionSpecification()
	| <left_paren> valueExpression() <right_paren>
}
void unsignedValueSpecification():
{}
{
	unsignedLiteral()
}
void unsignedLiteral():
{}
{
	unsignedNumericLiteral()
	| generalLiteral()
}
void stringValueExpression():
{}
{
	characterValueExpression()
}
void characterValueExpression():
{}
{
	characterFactor()
}
void characterFactor():
{}
{
	characterPrimary()
}
void characterPrimary():
{}
{
	valueExpressionPrimary()
}
void identifier():
{}
{
	actualIdentifier()
}
void actualIdentifier():
{}
{
	regularIdentifier() | delimitedIdentifier()
}
void delimitedIdentifier():
{}
{
	<double_quote> delimitedIdentifierBody() <double_quote>
}
void delimitedIdentifierBody():
{}
{
	(delimitedIdentifierPart())*
}
void delimitedIdentifierPart():
{}
{
	<nondoublequote_character> | doublequoteSymbol()
}
void doublequoteSymbol():
{}
{
	<escaped_double_quote>
}
void columnReference():
{}
{
	
	[ LOOKAHEAD(2) qualifier() <period> ] columnName()
}
void querySpecification():
{}
{
	<select> [setQuantifier()] selectList()
}
void selectList():
{}
{
	<asterisk>
	| selectSubList() (<comma> selectSubList())*
}
void selectSubList():
{}
{
	LOOKAHEAD(2)
	derivedColumn()
	| qualifier() <period><asterisk>
}
void derivedColumn():
{}
{
	valueExpression() [ asClause()]
}
void asClause():
{}
{
	[<as>] columnName()
}
void columnName():
{}
{
	identifier()
}
void setQuantifier():
{}
{
	<distinct>|<all>
}
void qualifier():
{}
{
	tableName() | correlationName()
}
void tableName():
{}
{
	[<syn>] unsignedInteger()
}
void correlationName():
{}
{
	identifier()
}
void setFunctionSpecification():
{}
{
	LOOKAHEAD(3)
	<count><left_paren> <asterisk> <right_paren>
	| generalSetFunction()
}
void generalSetFunction():
{}
{
	setFunctionType() <left_paren> [ setQuantifier() ] valueExpression() <right_paren>
}
void setFunctionType():
{}
{
	<avg> | <max> | <min> | <sum> | <count>
}
