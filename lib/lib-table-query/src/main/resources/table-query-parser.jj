/* The BNF for this parser was derived from: http://savage.net.au/SQL/sql-92.bnf (SQL-92) 
* https://javacc.java.net/doc/docindex.html
* To debug changes to this file run:
* mvn clean generate-sources
*/
options{
STATIC = false;
}
/* *** Specification of the parser class *** */
PARSER_BEGIN(TableQueryParser)
package org.sagebionetworks.table.query;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;

import org.sagebionetworks.repo.model.table.query.*;
import org.sagebionetworks.table.query.model.*;

public class TableQueryParser {

	/**
	 * Parse the passed query string into a TableQueryModel
	 * 
	 * @param query
	 * @return
	 * @throws ParseException
	 */
	public static QuerySpecification parserQuery(String query)
			throws ParseException {
		TableQueryParser parser = new TableQueryParser(new StringReader(query));
		return parser.Start();
	}
}

PARSER_END(TableQueryParser)

/* Skip whitespace */
SKIP : /* WHITE SPACE */
{ 
  " "
| "\t"
| "\r"
| "\f"
| "\n"
| < NONPRINTABLE: (["\u0000"-"\u0020", "\u007F"-"\u00ff"])+ >
}


/** TOKENS **/

/* Reserved words */
TOKEN [IGNORE_CASE]: {
  < all: "ALL">
| < as: "AS">
| < avg: "AVG">
| < date: "DATE" >
| < count: "COUNT">
| < current_date: "CURRENT_DATE">
| < current_time: "CURRENT_TIME">
| < distinct: "DISTINCT"> 
| < from: "FROM">
| < interval: "INTERVAL">
| < max: "MAX" >
| < min: "MIN" >
| < select: "SELECT" >
| < sum: "SUM" >
| < syn: "SYN" >
| < time: "TIME" >
| < timestamp: "TIMESTAMP">
}
/* Symbols and punctuation */
TOKEN:{
  < asterisk: "*">
| < comma: ",">
| < double_quote: "\"" >
| < doublequote_symbol: "\"\"">
| < left_paren: "(">
| < minus_sign: "-">
| < period: "." >
| < plus_sign: "+">
| < quote: "'" >
| < quote_symbol: "''" >
| < right_paren: ")">
| < solidus: "/">
| <underscore: "_">

}/* Complex Tokens */
TOKEN: { 
  < digit: ["0"-"9"]>
| < letter: ["a"-"z","A"-"Z"]>
}

/* Non-tokens */
TOKEN: { 
  < non_quote: ~["'"]>
| < nondoublequote_character: ~["\""] >
 }
String regularIdentifier():
{
	StringBuilder builder = new StringBuilder();
	Token token = null;
}
{
	token = <letter> { builder.append(token.image); }
	( token = <letter> { builder.append(token.image); }
	 | token = <digit> { builder.append(token.image); }
	 | token = <underscore> { builder.append(token.image); }
	)* 
	 { return builder.toString(); }
}
/** Literal Numbers, Strings, Dates and Times */

String unsignedInteger():
{
	StringBuilder builder = new StringBuilder();
	Token token = null;
}
{
	token = <digit> { builder.append(token.image); }
		( token = <digit> { builder.append(token.image); } )*
	{ return builder.toString(); }
}
String sign():
{}
{
	<plus_sign> { return "+"; }
	| <minus_sign> { return "-"; }
}
String signedInteger():
{
	StringBuilder builder = new StringBuilder();
	String value = null;
}
{
	[ value = sign() { builder.append(value); } ] value = unsignedInteger() { builder.append(value); }
	{ return builder.toString(); }
}
String exactNumericLiteral():
{
	StringBuilder builder = new StringBuilder();
	String value = null;
}
{
	(value = unsignedInteger() { builder.append(value); } <period> { builder.append("."); } value = unsignedInteger() { builder.append(value); } ) { return builder.toString(); }
	| (<period> { builder.append("."); } unsignedInteger() { builder.append(value); }) { return builder.toString(); }
}
String approximateNumericLiteral():
{
	StringBuilder builder = new StringBuilder();
	String value = null;
}
{
	value = exactNumericLiteral() { builder.append(value); } ("e"|"E") { builder.append("e"); } value = signedInteger() { builder.append(value); return builder.toString(); } 
}
String unsignedNumericLiteral():
{
	StringBuilder builder = new StringBuilder();
	String value = null;
}
{
	value = exactNumericLiteral() { builder.append(value); }
	[ ("e"|"E") { builder.append("e"); } value = signedInteger() { builder.append(value); }] 
	{ return builder.toString(); } 
}
String signedNumericLiteral():
{
	StringBuilder builder = new StringBuilder();
	String value = null;
}
{
	[ value = sign() { builder.append(value); }] value = unsignedNumericLiteral() { builder.append(value); return builder.toString(); }
}
void literal():
{}
{
	signedNumericLiteral() | generalLiteral()
}
void generalLiteral():
{}
{
	characterStringLiteral()
}
String characterStringLiteral():
{
	StringBuilder builder = new StringBuilder();
	Token token;
}
{
	<quote_symbol> { return ""; }
	| <quote> ( token = <non_quote> {builder.append(token.image); } | <quote_symbol> { builder.append("'"); })* <quote>
	{ return builder.toString(); }
}
/* This is the entry point of the parser*/
QuerySpecification Start():
{ 
	QuerySpecification querySpecification = null;
}
{
	querySpecification = querySpecification()
	{ return querySpecification; }
}
ValueExpression valueExpression():
{ ValueExpression valueExpression;}
{	
	valueExpression = valueExpressionPrimary() { return valueExpression;}
}
ValueExpression valueExpressionPrimary():
{
	SetFunctionSpecification setFunction = null;
	ColumnReference columnReference = null;
}
{
	setFunction = setFunctionSpecification() { return new ValueExpression(setFunction, null);}
	| columnReference = columnReference() { return new ValueExpression(null, columnReference);}
}
void unsignedValueSpecification():
{}
{
	unsignedLiteral()
}
void unsignedLiteral():
{}
{
	unsignedNumericLiteral()
	| generalLiteral()
}
String identifier():
{
	String identifier = null;
}
{
	identifier = actualIdentifier()
	{ return identifier;}
}
String actualIdentifier():
{
	String identifier = null;
}
{
	identifier = regularIdentifier() { return identifier; }
	| identifier = delimitedIentifier() { return identifier; }
}
String delimitedIentifier():
{ 
	StringBuilder builder = new StringBuilder();
	Token token = null;
}
{
	<double_quote> (token = <nondoublequote_character> {builder.append(token.image);} | <doublequote_symbol> { builder.append("'");})* <double_quote>
	{ return builder.toString(); }
}
ColumnReference columnReference():
{
	Qualifier qualifier = null;
	String columnName = null;
}
{
	[ LOOKAHEAD(2) qualifier = qualifier() <period> ] columnName = columnName()
	{ return new ColumnReference(qualifier, columnName); }
}
QuerySpecification querySpecification():
{
	SetQuantifier setQuantifier = null;
	SelectList selectList = null;
	TableExpression tableExpression = null;
}
{
	<select> [ setQuantifier = setQuantifier()] selectList = selectList() tableExpression = tableExpression()
	{ return new QuerySpecification(setQuantifier, selectList, tableExpression); }
}
SelectList selectList():
{
	List<DerivedColumn> derivedColumns = new LinkedList<DerivedColumn>();
	DerivedColumn derivedColumn = null;
}
{
	<asterisk> { return new SelectList("*", null); }
	| derivedColumn = selectSubList()  { derivedColumns.add(derivedColumn); }
	 (<comma> derivedColumn = selectSubList()  { derivedColumns.add(derivedColumn); })*
	 { return new SelectList(null, derivedColumns); }
}
DerivedColumn selectSubList():
{
	DerivedColumn derivedColumn = null;
}
{
	derivedColumn = derivedColumn()
	{ return derivedColumn; }
}
DerivedColumn derivedColumn():
{
	String asClause = null;
	ValueExpression valueExpression = null;
}
{
	valueExpression = valueExpression() [ asClause = asClause()]
	{ return new DerivedColumn(valueExpression, asClause);}
}
String asClause():
{
	String columnName = null;
}
{
	<as> columnName = columnName()
	{ return columnName; }
}
TableExpression tableExpression():
{
	FromClause fromClause = null;
}
{
	fromClause = fromClause()
	{ return new TableExpression(fromClause); }
}
FromClause fromClause():
{
	TableReference tableReference = null;
}
{
	<from> tableReference = tableReference()
	{ return new FromClause(tableReference); }
}
TableReference tableReference():
{
	String tableName = null;
}
{
	tableName = tableName()
	{ return new TableReference(tableName); }
}
String columnName():
{
	String columnName = null;
}
{
	columnName = identifier() {return columnName; }
}
SetQuantifier setQuantifier():
{}
{
	<distinct> { return SetQuantifier.DISTINCT;}
	|<all> { return SetQuantifier.ALL;}
}
Qualifier qualifier():
{
	String tableName = null;
	String correlationName = null;
}
{
	tableName = tableName() { return new Qualifier(tableName, null); }
}
String tableName():
{ 
	String identifier;
}
{	
	identifier = regularIdentifier()	{ return identifier;}
	| identifier = unsignedInteger() { return identifier;}
}
SetFunctionSpecification setFunctionSpecification():
{ SetFunctionSpecification setFunction = null; }
{
	LOOKAHEAD(3)
	<count><left_paren> <asterisk> <right_paren>
	{ return new SetFunctionSpecification(SetFunctionType.COUNT, null, new ValueExpression(null, new ColumnReference(null, "*"))); }
	| setFunction = generalSetFunction() { return setFunction;}
}
SetFunctionSpecification generalSetFunction():
{ 
	SetFunctionType setFunctionType = null;
	SetQuantifier setQuantifier = null;
	ValueExpression valueExpression = null;
}
{
	setFunctionType = setFunctionType() <left_paren> [ setQuantifier = setQuantifier() ] valueExpression = valueExpression() <right_paren>
	{ return new SetFunctionSpecification(setFunctionType, setQuantifier, valueExpression);}
}
SetFunctionType setFunctionType():
{}
{
	<avg> { return SetFunctionType.AVG; }
	| <max> { return SetFunctionType.MAX; }
	| <min> { return SetFunctionType.MIN; }
	| <sum> { return SetFunctionType.SUM; }
	| <count> { return SetFunctionType.COUNT; }
}
