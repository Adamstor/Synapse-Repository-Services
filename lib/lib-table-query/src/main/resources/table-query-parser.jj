/* The BNF for this parser was derived from: http://savage.net.au/SQL/sql-92.bnf (SQL-92) 
* https://javacc.java.net/doc/docindex.html
*/
options{
STATIC = false;
}
/* *** Specification of the parser class *** */
PARSER_BEGIN(TableQueryParser)
package org.sagebionetworks.table.query;
import java.io.StringReader;
import org.sagebionetworks.repo.model.table.query.*;
import org.sagebionetworks.table.query.model.*;

public class TableQueryParser {

	private TableQueryModel model;

	public TableQueryModel getModel() {
		return model;
	}
	/**
	 * Parse the passed query string into a TableQueryModel
	 * 
	 * @param query
	 * @return
	 * @throws ParseException
	 */
	public static TableQueryModel parserQuery(String query)
			throws ParseException {
		TableQueryParser parser = new TableQueryParser(new StringReader(query));
		parser.Start();
		return parser.getModel();
	}
}

PARSER_END(TableQueryParser)

/* Skip whitespace */
SKIP : /* WHITE SPACE */
{ 
  " "
| "\t"
| "\r"
| "\f"
| "\n"
| < NONPRINTABLE: (["\u0000"-"\u0020", "\u007F"-"\u00ff"])+ >
}


/** TOKENS **/

/* Reserved words */
TOKEN [IGNORE_CASE]: {
  < all: "ALL">
| < as: "AS">
| < avg: "AVG">
| < date: "DATE" >
| < count: "COUNT">
| < current_date: "CURRENT_DATE">
| < current_time: "CURRENT_TIME">
| < distinct: "DISTINCT"> 
| < from: "FROM">
| < interval: "INTERVAL">
| < max: "MAX" >
| < min: "MIN" >
| < select: "SELECT" >
| < sum: "SUM" >
| < syn: "SYN" >
| < time: "TIME" >
| < timestamp: "TIMESTAMP">
}
/* Symbols and punctuation */
TOKEN:{
  < asterisk: "*">
| < comma: ",">
| < double_quote: "\"" >
| < doublequote_symbol: "\"\"">
| < left_paren: "(">
| < minus_sign: "-">
| < period: "." >
| < plus_sign: "+">
| < quote: "'" >
| < quote_symbol: "''" >
| < right_paren: ")">
| < solidus: "/">
| <underscore: "_">

}/* Complex Tokens */
TOKEN: { 
  < digit: ["0"-"9"]>
| < letter: ["a"-"z","A"-"Z"]>
| < identifier: (<letter>(<letter>|<digit>|<underscore>)*)>
| < unsigned_integer: (<digit>)+ >
| < sign: (<plus_sign> | <minus_sign>)>
| < signed_integer: ((<sign>)? <unsigned_integer>)>
| < exact_numeric_literal: (<unsigned_integer><period><unsigned_integer>) | (<period><unsigned_integer>)>
| < approximate_numeric_literal: (<exact_numeric_literal>("e"|"E"))<signed_integer>>
| < unsigned_numeric_literal: (<exact_numeric_literal>|<approximate_numeric_literal>) >
| < signed_numeric_literal: ((<sign>)? <unsigned_numeric_literal>) >
}

/* Non-tokens */
TOKEN: { 
  < non_quote: ~["'"]>
| < nondoublequote_character: ~["\""] >
 }

/* Strings */
TOKEN: {
  < character_string_literal: ( <quote_symbol> | (<quote> (<non_quote> | <quote_symbol>)* <quote>)) >
| < delimited_identifier: (<double_quote> (<nondoublequote_character> | <doublequote_symbol>)* <double_quote>)>
} 

void regularIdentifier():
{}
{
	<identifier>
}
/** Literal Numbers, Strings, Dates and Times */
void literal():
{}
{
	<signed_numeric_literal> | generalLiteral()
}
void generalLiteral():
{}
{
	<character_string_literal>
}
/* This is the entry point of the parser*/
void Start():
{ model = new TableQueryModel(); }
{
	querySpecification()
}
ValueExpression valueExpression():
{ ValueExpression valueExpression;}
{	
	valueExpression = valueExpressionPrimary() { return valueExpression;}
}
ValueExpression valueExpressionPrimary():
{
	SetFunction setFunction = null;
	ColumnReference columnReference = null;
}
{
	setFunction = setFunctionSpecification() { return new ValueExpression(setFunction, null);}
	| columnReference = columnReference() { return new ValueExpression(null, columnReference);}
}
void unsignedValueSpecification():
{}
{
	unsignedLiteral()
}
void unsignedLiteral():
{}
{
	<unsigned_numeric_literal>
	| generalLiteral()
}
String identifier():
{
	String identifier = null;
}
{
	identifier = actualIdentifier()
	{ return identifier;}
}
String actualIdentifier():
{
	Token token = null;
}
{
	token = <identifier> { return token.image;}
	| token = <delimited_identifier> { return token.image;}
}
ColumnReference columnReference():
{
	Qualifier qualifier = null;
	String columnName = null;
}
{
	[ LOOKAHEAD(2) qualifier = qualifier() <period> ] columnName = columnName()
	{ return new ColumnReference(qualifier, columnName); }
}
void querySpecification():
{}
{
	<select> [setQuantifier()] selectList()
}
void selectList():
{}
{
	<asterisk>
	| selectSubList() (<comma> selectSubList())*
}
void selectSubList():
{}
{
	derivedColumn()
}
void derivedColumn():
{}
{
	valueExpression() [ asClause()]
}
void asClause():
{}
{
	<as> columnName()
}
String columnName():
{
	String columnName = null;
}
{
	columnName = identifier() {return columnName; }
}
SetQuantifier setQuantifier():
{}
{
	<distinct> { return SetQuantifier.DISTINCT;}
	|<all> { return SetQuantifier.ALL;}
}
Qualifier qualifier():
{
	TableName tableName = null;
	String correlationName = null;
}
{
	tableName = tableName() { return new Qualifier(tableName, null); }
	| correlationName = correlationName() { return new Qualifier(null, correlationName); }
}
TableName tableName():
{ 
	boolean hasSyn = false;
	Token token = null;
}
{
	[<syn>{ hasSyn = true; }] token = <unsigned_integer>
	{ return new TableName(hasSyn, Long.parseLong(token.image));}
}
String correlationName():
{
 	String correlationName = null;
}
{
	correlationName = identifier()
	{ return correlationName; }
}
SetFunction setFunctionSpecification():
{ SetFunction setFunction = null; }
{
	LOOKAHEAD(3)
	<count><left_paren> <asterisk> <right_paren>
	{ return new SetFunction(SetFunctionType.COUNT, null, new ValueExpression(null, new ColumnReference(null, "*"))); }
	| setFunction = generalSetFunction() { return setFunction;}
}
SetFunction generalSetFunction():
{ 
	SetFunctionType setFunctionType = null;
	SetQuantifier setQuantifier = null;
	ValueExpression valueExpression = null;
}
{
	setFunctionType = setFunctionType() <left_paren> [ setQuantifier = setQuantifier() ] valueExpression = valueExpression() <right_paren>
	{ return new SetFunction(setFunctionType, setQuantifier, valueExpression);}
}
SetFunctionType setFunctionType():
{}
{
	<avg> { return SetFunctionType.AVG; }
	| <max> { return SetFunctionType.MAX; }
	| <min> { return SetFunctionType.MIN; }
	| <sum> { return SetFunctionType.SUM; }
	| <count> { return SetFunctionType.COUNT; }
}
